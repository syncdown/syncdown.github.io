<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>golang</title>
	<atom:link href="https://syncdown.github.io/tag/golang/feed/" rel="self" type="application/rss+xml" />
	<link>https://syncdown.github.io/</link>
	<description></description>
	<lastBuildDate>Tue, 04 Jun 2024 03:28:00 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.5.3</generator>

<image>
	<url>https://syncdown.github.io/wp-content/uploads/2024/04/syncdown-150x150.png</url>
	<title>golang</title>
	<link>https://syncdown.github.io/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>golang中的深拷贝</title>
		<link>https://syncdown.github.io/golang%e4%b8%ad%e7%9a%84%e6%b7%b1%e6%8b%b7%e8%b4%9d/</link>
		
		<dc:creator><![CDATA[Zhenyu Chen]]></dc:creator>
		<pubDate>Sun, 02 Jun 2024 09:32:51 +0000</pubDate>
				<category><![CDATA[技术]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[深拷贝]]></category>
		<guid isPermaLink="false">https://syncdown.github.io/?p=187</guid>

					<description><![CDATA[相信大家都有过这样的经历，生活中的打印和复印，一般都是打印贵，复印便宜。为了更节约成本，会先打印一份，然后把这份纸质文稿再复印几份。 打印很像原型实例化的过程(from struct)，而复印特别像原型拷贝的过程(from seed instance)。 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>相信大家都有过这样的经历，生活中的打印和复印，一般都是打印贵，复印便宜。为了更节约成本，会先打印一份，然后把这份纸质文稿再复印几份。</p>



<p>打印很像<strong>原型实例化的过程</strong>(from struct)，而复印特别像<strong>原型拷贝的过程</strong>(from seed instance)。</p>



<p>区别就在于，对于某些语言比如java，如果是原型实例化的过程可能很耗时，而拥有一个实例把它作为种子或者模板进行拷贝，这个过程可能既简单又快速。而golang连赋值都是值传递，值拷贝，所以要做到深拷贝还是很容易的。</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// golang这门语言的赋值都是值传递，如果结构中不含指针，那么直接复制就是深拷贝
func DeepCopy(src Person) Person {
	return Person{Name: src.Name, Age: src.Age}
}</pre>



<p>测试文件</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package Solution

import (
	"fmt"
	"reflect"
	"runtime"
	"strings"
	"testing"
	"unsafe"

	"github.com/davecgh/go-spew/spew"
	"github.com/stretchr/testify/assert"
)

type SolutionFuncType func(src Person) Person

var SolutionFuncTypeList = []SolutionFuncType{
	DeepCopy,
}

type Case struct {
	caseName string
	input    Person
}

var cases = []Case{
	{"normal", Person{Name: "mike", Age: 10}},
}

func TestDeepCopy(t *testing.T) {
	ast := assert.New(t)

	for _, f := range SolutionFuncTypeList {
		funcName := strings.Split(runtime.FuncForPC(reflect.ValueOf(f).Pointer()).Name(), ".")[1]
		spew.Dump(funcName)
		for _, c := range cases {
			t.Run(fmt.Sprintf("%s %s", funcName, c.caseName), func(t *testing.T) {
				output := f(c.input)
				ast.Equal(c.input, output, "func:%s case:%s", funcName, c.caseName)
				ast.NotEqual(unsafe.Pointer(&amp;c.input), unsafe.Pointer(&amp;output))
			})
		}
	}
}</pre>



<p>反思自己，之前也有项目中间需要不断进行实例化的场景，如果是分布式的话就不得不进行类似于json的encode decode，当然gob也可以，会稍微快一点，但是就不太好进行日志打印了，因为一般公司都是以json的格式进行日志处理的。</p>



<p>如果没有跨机器实例，直接从已有的instance进行实例化也不妨是一种好办法。</p>



<p>如下，举个例子，最上层的struct既包含值类型的字段Name Age，也包含指针类型的字段ParentInfo。对于这种原型已有的实例进行深拷贝。</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">type Person struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
}

type ParentInfo struct {
	Father string `json:"father"`
	Mother string `json:"mother"`
}

type PersonWithPointer struct {
	Person                // anonymous field
	ParentInfo ParentInfo `json:"parent_info"`
}

func DeepCopyPersonWithPointer(src PersonWithPointer) PersonWithPointer {
	dst := PersonWithPointer{}
	dst.Age = src.Age
	dst.Name = src.Name

	parentInfo := ParentInfo{Father: src.ParentInfo.Father, Mother: src.ParentInfo.Mother}
	dst.ParentInfo = parentInfo
	return dst
}

func DeepCopyPersonWithPointerByJson(src PersonWithPointer) PersonWithPointer {
	dst := PersonWithPointer{}
	bytes, err := json.Marshal(src)
	if err != nil {
		panic(err)
	}
	err = json.Unmarshal(bytes, &amp;dst)
	if err != nil {
		panic(err)
	}
	return dst
}</pre>



<p>对应的单元测试代码</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">type SolutionFuncType1 func(src PersonWithPointer) PersonWithPointer

var SolutionFuncTypeList1 = []SolutionFuncType1{
	DeepCopyPersonWithPointer,
	DeepCopyPersonWithPointerByJson,
}

type Case1 struct {
	caseName string
	input    PersonWithPointer
}

var cases1 = []Case1{
	{"normal", PersonWithPointer{Person: Person{Name: "zhangsan", Age: 20}, ParentInfo: ParentInfo{Father: "zhanger", Mother: "wanglili"}}},
}

func TestDeepCopyWithPointer(t *testing.T) {
	ast := assert.New(t)

	for _, f := range SolutionFuncTypeList1 {
		funcName := strings.Split(runtime.FuncForPC(reflect.ValueOf(f).Pointer()).Name(), ".")[1]
		for _, c := range cases1 {
			t.Run(fmt.Sprintf("%s %s", funcName, c.caseName), func(t *testing.T) {
				output := f(c.input)
				ast.Equal(c.input, output, "func:%s case:%s", funcName, c.caseName)
				ast.NotEqual(unsafe.Pointer(&amp;c.input), unsafe.Pointer(&amp;output))
			})
		}
	}
}</pre>



<p>既然利用已有的instance有两种方式， 那么到底是encode decode这种快，还是自定义的快呢？benchmark一下看看。</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">func BenchmarkDeepCopyWithPointer(b *testing.B) {
	for _, c := range cases1 {
		for n := 0; n &lt; b.N; n++ {
			DeepCopyPersonWithPointer(c.input)
		}
	}

}

func BenchmarkDeepCopyWithPointerByJson(b *testing.B) {
	for _, c := range cases1 {
		for n := 0; n &lt; b.N; n++ {
			DeepCopyPersonWithPointerByJson(c.input)
		}
	}

}</pre>



<p>benchmark结果</p>



<figure class="wp-block-image size-large"><img fetchpriority="high" decoding="async" width="1024" height="212" src="https://syncdown.github.io/wp-content/uploads/2024/06/image-3-1024x212.png" alt="" class="wp-image-194" srcset="https://syncdown.github.io/wp-content/uploads/2024/06/image-3-1024x212.png 1024w, https://syncdown.github.io/wp-content/uploads/2024/06/image-3-300x62.png 300w, https://syncdown.github.io/wp-content/uploads/2024/06/image-3-768x159.png 768w, https://syncdown.github.io/wp-content/uploads/2024/06/image-3-1536x319.png 1536w, https://syncdown.github.io/wp-content/uploads/2024/06/image-3.png 1572w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>执行的时候运行 go test -bench=被测试方法前缀。</p>



<p>从性能上看，从已有的instance进行深拷贝，用自定义的方法比json encode decode要快了三个数量级。</p>



<p>就是DeepCopyPersonWithPointer要比DeepCopyPersonWithPointerByJson快得多。</p>



<p>我使用的struct比较简单，如果是面对复杂一些的真实业务的场景，可能相差的性能会更大。</p>



<p>结论：</p>



<ol>
<li class="has-regular-font-size">原型复制有两种方式，一种是基于struct结构，一种是基于已有的instance把它作为种子进行拷贝</li>



<li class="has-regular-font-size">golang复制默认就是值传递</li>



<li class="has-regular-font-size">自定义的struct如果有指针类型，用自制的方法，细粒度到指针的子字段级别</li>



<li class="has-regular-font-size">相对于encode decode的深拷贝，自制的方法性能会更好</li>
</ol>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
