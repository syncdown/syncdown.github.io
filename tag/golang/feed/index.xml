<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>golang</title>
	<atom:link href="https://syncdown.github.io/tag/golang/feed/" rel="self" type="application/rss+xml" />
	<link>https://syncdown.github.io/</link>
	<description></description>
	<lastBuildDate>Thu, 18 Jul 2024 12:23:05 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.5.5</generator>

<image>
	<url>https://syncdown.github.io/wp-content/uploads/2024/04/syncdown-150x150.png</url>
	<title>golang</title>
	<link>https://syncdown.github.io/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>方法中返回局部变量地址，方便和内存逃逸怎么选？</title>
		<link>https://syncdown.github.io/%e6%96%b9%e6%b3%95%e4%b8%ad%e8%bf%94%e5%9b%9e%e5%b1%80%e9%83%a8%e5%8f%98%e9%87%8f%e5%9c%b0%e5%9d%80%ef%bc%8c%e6%96%b9%e4%be%bf%e5%92%8c%e5%86%85%e5%ad%98%e9%80%83%e9%80%b8%e6%80%8e%e4%b9%88%e9%80%89/</link>
		
		<dc:creator><![CDATA[Zhenyu Chen]]></dc:creator>
		<pubDate>Thu, 18 Jul 2024 12:23:05 +0000</pubDate>
				<category><![CDATA[技术]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[内存逃逸]]></category>
		<guid isPermaLink="false">https://syncdown.github.io/?p=253</guid>

					<description><![CDATA[在 Go 语言中，内存逃逸有好多种情况， 其中最常见的一种就是方法中返回了局部变量的地址。 内存逃逸是指在函数内部创建的变量，其生命周期超出了函数的范围，被分配到堆上而不是栈上。一般情况下，局部变量会被分配到栈上，函数执行结束后会自动释放栈空间。然而，如果函数返回了局部变量的地址，并且该地址在函数外部被使用，那么这个局部变量就不能在函数结束时被释放，因此需要将其分配到堆上，以保证其生命周期的延续性。 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>在 Go 语言中，内存逃逸有好多种情况， 其中最常见的一种就是方法中返回了局部变量的地址。</p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>内存逃逸是指在函数内部创建的变量，其生命周期超出了函数的范围，被分配到堆上而不是栈上。一般情况下，局部变量会被分配到栈上，函数执行结束后会自动释放栈空间。然而，如果函数返回了局部变量的地址，并且该地址在函数外部被使用，那么这个局部变量就不能在函数结束时被释放，因此需要将其分配到堆上，以保证其生命周期的延续性。</p>
</blockquote>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">func memoryLeak() *xyz {
	return &amp;xyz{}
}</pre>



<p>原因就是因为返回的地址被方法外部所使用，那么这个局部变量就不能再函数结束的时候被释放，在编译时就将其分配到堆上，需要在运行时靠垃圾回收机制才能释放内存。</p>



<p>那如果不返回地址，而是返回值类型变量，是不是就避免了内存逃逸问题呢？</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">type myStructure struct {
	Name    string
	Surname string
	Height  int32
}

// 引发内存逃逸
func NewStructurePointer(n, s string, h int32) *myStructure {
	if h > 300 {
		h = 0
	}
	return &amp;myStructure{n, s, h}
}

// 返回值类型，避免内存逃逸
func NewStructure(n, s string, h int32) myStructure {
	if h > 300 {
		h = 0
	}
	return myStructure{n, s, h}
}</pre>



<p>如果调用NewStructurePointer方法，编译的时候进行一下逃逸分析就知道了，(*s1).Name escapes to heap， 很明显会指出具体的变量会逃逸到堆中。 </p>



<figure class="wp-block-image size-large"><img fetchpriority="high" decoding="async" width="1024" height="635" src="https://syncdown.github.io/wp-content/uploads/2024/07/image-1024x635.png" alt="" class="wp-image-254" srcset="https://syncdown.github.io/wp-content/uploads/2024/07/image-1024x635.png 1024w, https://syncdown.github.io/wp-content/uploads/2024/07/image-300x186.png 300w, https://syncdown.github.io/wp-content/uploads/2024/07/image-768x477.png 768w, https://syncdown.github.io/wp-content/uploads/2024/07/image-1536x953.png 1536w, https://syncdown.github.io/wp-content/uploads/2024/07/image.png 1834w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>如果调用NewStructure方法， 再来看一下。</p>



<figure class="wp-block-image size-large"><img decoding="async" width="1024" height="885" src="https://syncdown.github.io/wp-content/uploads/2024/07/image-1-1024x885.png" alt="" class="wp-image-255" srcset="https://syncdown.github.io/wp-content/uploads/2024/07/image-1-1024x885.png 1024w, https://syncdown.github.io/wp-content/uploads/2024/07/image-1-300x259.png 300w, https://syncdown.github.io/wp-content/uploads/2024/07/image-1-768x664.png 768w, https://syncdown.github.io/wp-content/uploads/2024/07/image-1-1536x1327.png 1536w, https://syncdown.github.io/wp-content/uploads/2024/07/image-1.png 1650w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>曾经一概而论NewStructPointer因为返回的是指针方便操作，而对它青睐有加。兜兜转转目前看上去还是NewStrcut返回值类型这样的方法签名更好一些，返璞归真，也更具备更好的可读性。</p>



<figure class="wp-block-image size-large"><img decoding="async" width="1024" height="290" src="https://syncdown.github.io/wp-content/uploads/2024/07/image-2-1024x290.png" alt="" class="wp-image-257" srcset="https://syncdown.github.io/wp-content/uploads/2024/07/image-2-1024x290.png 1024w, https://syncdown.github.io/wp-content/uploads/2024/07/image-2-300x85.png 300w, https://syncdown.github.io/wp-content/uploads/2024/07/image-2-768x218.png 768w, https://syncdown.github.io/wp-content/uploads/2024/07/image-2.png 1404w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>结论：</p>



<ol>
<li>方法中的局部变量直接返回地址是会造成内存逃逸的。</li>



<li>如果方法直接返回值类型的变量，就没有内存逃逸的风险。</li>



<li>内存逃逸分析是编译阶段。</li>



<li>内存释放是运行阶段的事情。</li>



<li>相比于指针类型返回的方法，更建议平时写代码返回值类型的。避免内存逃逸，可读性也更好一些。</li>
</ol>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>go中的defer</title>
		<link>https://syncdown.github.io/go%e4%b8%ad%e7%9a%84defer/</link>
		
		<dc:creator><![CDATA[Zhenyu Chen]]></dc:creator>
		<pubDate>Tue, 16 Jul 2024 07:25:58 +0000</pubDate>
				<category><![CDATA[技术]]></category>
		<category><![CDATA[defer]]></category>
		<category><![CDATA[golang]]></category>
		<guid isPermaLink="false">https://syncdown.github.io/?p=242</guid>

					<description><![CDATA[说起defer ， 用go进行开发的工程师肯定不会陌生。 粗浅的说，是用先进后出的方式，在方法返回的时刻进行执行statement的关键字。 官方文档：“A [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>说起defer ， 用go进行开发的工程师肯定不会陌生。 </p>



<p>粗浅的说，是用先进后出的方式，在方法返回的时刻进行执行statement的关键字。 </p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>官方文档：“A “defer” statement invokes a function whose execution is deferred to the moment the surrounding function returns, either because the surrounding function executed a return statement, reached the end of its function body, or because the corresponding goroutine is panicking.”<br>即函数返回、函数结束或者对应的goroutine发生panic时defer执行。</p>



<p>关键词：surrounding function，returns，end of its function body, goroutine panicking</p>
</blockquote>



<p>确实，之前总是狭隘的认为就方法return的时刻，没有想到panic的情况， 是记不准确也不全面。 </p>



<ol>
<li>defer运行的时机</li>
</ol>



<ul>
<li>说法一：defer的运行时机是方法返回结束之后，返回之前。</li>



<li>说法二：既然是defer那么就有外围方法和当前方法的区别，是当前方法返回之后，外围方法执行之前。</li>



<li>不管是哪种说法，写代码验证一下就好。</li>
</ul>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package main

import "fmt"

func external() {
	fmt.Println("external is starting")
	internal()
	fmt.Println("external is ending")
}

func internal() {
	fmt.Println("internal is starting")
	defer func() {
		fmt.Println("internal defer is executing")
	}()
	fmt.Println("internal is ending")

}
func main() {
	external()
}
</pre>



<p>执行结果</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">external is starting
internal is starting
internal is ending
internal defer is executing
external is ending</pre>



<p>defer执行的时机，<strong>是在当法return或语句结束之后，而在方法真正退出之前</strong>。</p>



<p>2. 多个defer的执行顺序-后入先出。即LIFO</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package main

import (
    "fmt"
)

func main() {
    defer fmt.Println("main defer1")
    test()
    defer fmt.Println("main defer2")
}

func test() () {
    defer func() {
        fmt.Println("test defer1")
    }()
    defer func() {
        fmt.Println("test defer2")
    }()
}
</pre>



<p>执行结果</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">test defer2
test defer1
main defer2
main defer1</pre>



<p>当多个defer的时候，就像栈一样，有压栈和出栈，其实是当前goroutine的defer链。执行的<strong>顺序是LIFO</strong>，最后压栈的会第一个执行。</p>



<p>3.除了return，当出现panic的时候defer也会被触发执行。</p>



<p>defer这个用处就非常大了，当然也得交代一下其他的背景。</p>



<ul>
<li><code>panic</code> 能够改变程序的控制流，调用 <code>panic</code> 后会立刻停止执行当前函数的剩余代码，并在当前 Goroutine 中递归执行调用<code>defer</code>；</li>



<li><code>recover</code> 可以中止 <code>panic</code> 造成的程序崩溃。它是一个只能在 <code>defer</code> 中发挥作用的函数，在其他作用域中调用不会发挥作用；</li>
</ul>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">func try(f func()) {
    defer func() {
        if err := recover(); err != nil {
            fmt.Println("caught panic:", err)
        }
    }()
    f()
}</pre>



<p>一般会封装一个<strong>try或者myRecover</strong>的方法，传入参数是自定义的方法。先defer后再执行自定义方法，recover一定要在defer中才能发挥作用。</p>



<p>总结：</p>



<ol>
<li>defer的执行时机是方法return之后，真正退出之前。</li>



<li>多个defer的顺序是LIFO，类似于栈。</li>



<li>封装myRcover方法，传入参数是自定义方法。当自定义方法出现panic，在defer中会用recover中止程序崩溃。（<strong>defer机制的执行顺序决定了是自定义方法panic之后程序会捕获，recover起到了中止程序崩溃的作用</strong>）</li>
</ol>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>golang并发中的cond</title>
		<link>https://syncdown.github.io/golang%e5%b9%b6%e5%8f%91%e4%b8%ad%e7%9a%84cond/</link>
		
		<dc:creator><![CDATA[Zhenyu Chen]]></dc:creator>
		<pubDate>Tue, 11 Jun 2024 06:29:06 +0000</pubDate>
				<category><![CDATA[技术]]></category>
		<category><![CDATA[cond]]></category>
		<category><![CDATA[golang]]></category>
		<guid isPermaLink="false">https://syncdown.github.io/?p=212</guid>

					<description><![CDATA[概览 cond应该是condition的缩写，它是goroutine的集合点，等待或发布一个event。 event就是两个或两个以上的goroutine之间的任意事件信号。 用来解决多个读协程等待共享资源变成ready的场景，和waitgroup很像，如果把waitgroup比作多匹赛马等待发令枪，waitgroup十分关心数量，而cond关心的则是条件。 使用场景的区别 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p class="has-larger-font-size">概览</p>



<p>cond应该是condition的缩写，它是goroutine的集合点，等待或发布一个event。</p>



<p>event就是两个或两个以上的goroutine之间的任意事件信号。</p>



<p>用来解决多个读协程等待共享资源变成ready的场景，和waitgroup很像，如果把waitgroup比作多匹赛马等待发令枪，waitgroup十分关心数量，而cond关心的则是条件。</p>



<p>使用场景的区别</p>



<ul>
<li>waitgroup：赛马等待发令枪，关心数量</li>



<li>cond
<ul>
<li>broadcast赛马等待发令枪，但是不太关系赛马的数量。</li>



<li>signal多辆车在单车道等红灯 或者 火车站的办事窗口-办完一个通知下一个，按照FIFO的顺序。</li>
</ul>
</li>
</ul>



<p class="has-larger-font-size">cond中的Wait和Broadcast</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package main

import (
	"fmt"
	"sync"
	"time"
)

var shared = false

func main() {
	wg := sync.WaitGroup{}
	// 构造cond对象，需要关联一把锁
	c := sync.NewCond(&amp;sync.Mutex{})

	// 两辆车在等红灯（两个协程读取共享变量）
	for i := 0; i &lt; 2; i++ {
		wg.Add(1)
		go func(i int) {
			c.L.Lock()
			// 红灯的情况
			// for !share{ 用for还是if，其实窦性，关键的是c.Wait()
			if !shared {
				fmt.Printf("time:%v goroutine %v wait\n", time.Now(), i)
				c.Wait()
			}
			// 绿灯的情况
			fmt.Printf("time:%v goroutine %v shared:%v\n", time.Now(), i, shared)
			c.L.Unlock()
			wg.Done()
		}(i)
	}

	// 管理红绿灯的控制程序
	time.Sleep(time.Second * 2)
	c.L.Lock()
	fmt.Printf("time:%v goroutine main ready\n", time.Now())
	shared = true
	c.Broadcast()
	fmt.Printf("time:%v goroutine main broadcast\n", time.Now())
	c.L.Unlock()

	// 让main这个子弹飞一会，不然会直接退出
	wg.Wait()

}
</pre>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="178" src="https://syncdown.github.io/wp-content/uploads/2024/06/image-4-1024x178.png" alt="" class="wp-image-214" srcset="https://syncdown.github.io/wp-content/uploads/2024/06/image-4-1024x178.png 1024w, https://syncdown.github.io/wp-content/uploads/2024/06/image-4-300x52.png 300w, https://syncdown.github.io/wp-content/uploads/2024/06/image-4-768x133.png 768w, https://syncdown.github.io/wp-content/uploads/2024/06/image-4.png 1508w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p><strong>两辆车一先一后在单行道上等待红灯，绿灯亮起后，先后读取到通行信号出发。</strong></p>



<p>小结：</p>



<ul>
<li>cond需要关联一把锁，可以是Mutex也可是RWMutex</li>



<li>不论是车还是红灯管理程序，读写共享变量都需要针对条件锁里面关联</li>



<li>cond的Wait()，#车要等待</li>



<li>cond的Broadcast() #红灯管理程序要广播，让车辆看得见。</li>
</ul>



<p class="has-larger-font-size">cond中的Wait和Signal</p>



<p>场景类比，单个窗口的派对，协程通过共享变量的读取竞争来获得执行权，谁先得到谁执行。</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package main

import (
	"fmt"
	"sync"
	"time"
)

var shared = false

func main() {
	wg := sync.WaitGroup{}
	c := sync.NewCond(&amp;sync.Mutex{})
	for i := 0; i &lt; 2; i++ {
		wg.Add(1)
		go func(i int) {
			c.L.Lock()
			for !shared {
				fmt.Printf("time:%v goroutine %v wait\n", time.Now(), i)
				c.Wait()
			}
			fmt.Printf("time:%v goroutine %v shared:%v\n", time.Now(), i, shared)
			c.L.Unlock()
			wg.Done()
		}(i)
	}

	for i := 0; i &lt; 2; i++ {
		time.Sleep(time.Second * 2)
		c.L.Lock()
		fmt.Printf("time:%v main goroutine %v ready\n ", time.Now(), i)
		shared = true
		c.Signal()
		fmt.Printf("time:%v main goroutine %v signal\n", time.Now(), i)
		c.L.Unlock()
	}

	wg.Wait()
}
</pre>



<p>结果</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="241" src="https://syncdown.github.io/wp-content/uploads/2024/06/image-5-1024x241.png" alt="" class="wp-image-217" srcset="https://syncdown.github.io/wp-content/uploads/2024/06/image-5-1024x241.png 1024w, https://syncdown.github.io/wp-content/uploads/2024/06/image-5-300x70.png 300w, https://syncdown.github.io/wp-content/uploads/2024/06/image-5-768x180.png 768w, https://syncdown.github.io/wp-content/uploads/2024/06/image-5.png 1456w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>当监听的对象是队列的时候</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package main

import (
	"fmt"
	"sync"
	"time"
)

func main() {
	c := sync.NewCond(&amp;sync.Mutex{})
	// 长度为零，容量为10的切片
	queue := make([]interface{}, 0, 10)

	addToQueue := func() {
		var i int
		for {
			c.L.Lock()
			// 队列大于等于3的时候就会停住，只要小于3写入队列就会很快 #快入#
			for len(queue) >= 3 {
				fmt.Printf("the size of queue is %d\n", len(queue))
				c.Wait()
			}
			fmt.Printf("Add to queue by %v\n", i)
			queue = append(queue, i)
			c.L.Unlock()
			c.Signal()
			i++
		}
	}

	removeFromQueue := func(delay time.Duration) {
		for {
			time.Sleep(delay)
			c.L.Lock()
			removed := queue[0]
			queue = queue[1:]
			fmt.Printf("Removed %v from queue\n", removed)
			c.L.Unlock()
			c.Signal()
		}
	}

	// 队列大于等于3的时候就会停住，只要小于3写入队列就会很快 #快入#
	go addToQueue()

	// 间隔一秒移除队列一项 #慢出#
	go removeFromQueue(1 * time.Second)

	var ch chan struct{}
	&lt;-ch
}
</pre>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="918" height="490" src="https://syncdown.github.io/wp-content/uploads/2024/06/image-6.png" alt="" class="wp-image-222" srcset="https://syncdown.github.io/wp-content/uploads/2024/06/image-6.png 918w, https://syncdown.github.io/wp-content/uploads/2024/06/image-6-300x160.png 300w, https://syncdown.github.io/wp-content/uploads/2024/06/image-6-768x410.png 768w" sizes="(max-width: 918px) 100vw, 918px" /></figure>



<p>因为队列是快入慢出的， 并且以3为阈值，大于等于3就停止写入。所以开始很快的写入队列三个数据，后来只能走一个进一个。</p>



<h2 class="wp-block-heading">cond的更合理的用法</h2>



<ol>
<li>把要监听的事件或者条件抽象成struct中的字段</li>



<li>对业务处理方法作为参数传入到订阅方法里面，在独立的goroutine中，在合适的时机运行它</li>
</ol>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package main

import (
	"fmt"
	"sync"
)

type Button struct {
	Clicked *sync.Cond
	//  other attributes，当前演示的是Buttone的点击事件，当然可以有别的事件
}

func main() {
	// 定义一个Button类型，包含一个clicked条件
	button := Button{Clicked: sync.NewCond(&amp;sync.Mutex{})}
	// 定义便利构造函数，允许注册函数监听信号，在合适的时机进行业务处理
	// 每个处理程序都独立在自己的goroutine上，订阅不会退出，直到goroutine被确认运行为止
	subscribe := func(c *sync.Cond, fn func()) {
		var goroutineRunning sync.WaitGroup
		goroutineRunning.Add(1)
		go func() {
			goroutineRunning.Done()
			c.L.Lock()
			defer c.L.Unlock()
			c.Wait()
			fn()
		}()
		goroutineRunning.Wait()
	}

	var clickRegistered sync.WaitGroup
	clickRegistered.Add(3)
	subscribe(button.Clicked, func() {
		fmt.Println("Maximizing windows")
		clickRegistered.Done()
	})
	subscribe(button.Clicked, func() {
		fmt.Println("Displaying anyting in windows")
		clickRegistered.Done()
	})
	subscribe(button.Clicked, func() {
		fmt.Println("Mouse cliked")
		clickRegistered.Done()
	})
	button.Clicked.Broadcast()
	clickRegistered.Wait()
}
</pre>



<p></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>golang中的深拷贝</title>
		<link>https://syncdown.github.io/golang%e4%b8%ad%e7%9a%84%e6%b7%b1%e6%8b%b7%e8%b4%9d/</link>
		
		<dc:creator><![CDATA[Zhenyu Chen]]></dc:creator>
		<pubDate>Sun, 02 Jun 2024 09:32:51 +0000</pubDate>
				<category><![CDATA[技术]]></category>
		<category><![CDATA[golang]]></category>
		<category><![CDATA[深拷贝]]></category>
		<guid isPermaLink="false">https://syncdown.github.io/?p=187</guid>

					<description><![CDATA[相信大家都有过这样的经历，生活中的打印和复印，一般都是打印贵，复印便宜。为了更节约成本，会先打印一份，然后把这份纸质文稿再复印几份。 打印很像原型实例化的过程(from struct)，而复印特别像原型拷贝的过程(from seed instance)。 [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>相信大家都有过这样的经历，生活中的打印和复印，一般都是打印贵，复印便宜。为了更节约成本，会先打印一份，然后把这份纸质文稿再复印几份。</p>



<p>打印很像<strong>原型实例化的过程</strong>(from struct)，而复印特别像<strong>原型拷贝的过程</strong>(from seed instance)。</p>



<p>区别就在于，对于某些语言比如java，如果是原型实例化的过程可能很耗时，而拥有一个实例把它作为种子或者模板进行拷贝，这个过程可能既简单又快速。而golang连赋值都是值传递，值拷贝，所以要做到深拷贝还是很容易的。</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">// golang这门语言的赋值都是值传递，如果结构中不含指针，那么直接复制就是深拷贝
func DeepCopy(src Person) Person {
	return Person{Name: src.Name, Age: src.Age}
}</pre>



<p>测试文件</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package Solution

import (
	"fmt"
	"reflect"
	"runtime"
	"strings"
	"testing"
	"unsafe"

	"github.com/davecgh/go-spew/spew"
	"github.com/stretchr/testify/assert"
)

type SolutionFuncType func(src Person) Person

var SolutionFuncTypeList = []SolutionFuncType{
	DeepCopy,
}

type Case struct {
	caseName string
	input    Person
}

var cases = []Case{
	{"normal", Person{Name: "mike", Age: 10}},
}

func TestDeepCopy(t *testing.T) {
	ast := assert.New(t)

	for _, f := range SolutionFuncTypeList {
		funcName := strings.Split(runtime.FuncForPC(reflect.ValueOf(f).Pointer()).Name(), ".")[1]
		spew.Dump(funcName)
		for _, c := range cases {
			t.Run(fmt.Sprintf("%s %s", funcName, c.caseName), func(t *testing.T) {
				output := f(c.input)
				ast.Equal(c.input, output, "func:%s case:%s", funcName, c.caseName)
				ast.NotEqual(unsafe.Pointer(&amp;c.input), unsafe.Pointer(&amp;output))
			})
		}
	}
}</pre>



<p>反思自己，之前也有项目中间需要不断进行实例化的场景，如果是分布式的话就不得不进行类似于json的encode decode，当然gob也可以，会稍微快一点，但是就不太好进行日志打印了，因为一般公司都是以json的格式进行日志处理的。</p>



<p>如果没有跨机器实例，直接从已有的instance进行实例化也不妨是一种好办法。</p>



<p>如下，举个例子，最上层的struct既包含值类型的字段Name Age，也包含指针类型的字段ParentInfo。对于这种原型已有的实例进行深拷贝。</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">type Person struct {
	Name string `json:"name"`
	Age  int    `json:"age"`
}

type ParentInfo struct {
	Father string `json:"father"`
	Mother string `json:"mother"`
}

type PersonWithPointer struct {
	Person                // anonymous field
	ParentInfo ParentInfo `json:"parent_info"`
}

func DeepCopyPersonWithPointer(src PersonWithPointer) PersonWithPointer {
	dst := PersonWithPointer{}
	dst.Age = src.Age
	dst.Name = src.Name

	parentInfo := ParentInfo{Father: src.ParentInfo.Father, Mother: src.ParentInfo.Mother}
	dst.ParentInfo = parentInfo
	return dst
}

func DeepCopyPersonWithPointerByJson(src PersonWithPointer) PersonWithPointer {
	dst := PersonWithPointer{}
	bytes, err := json.Marshal(src)
	if err != nil {
		panic(err)
	}
	err = json.Unmarshal(bytes, &amp;dst)
	if err != nil {
		panic(err)
	}
	return dst
}</pre>



<p>对应的单元测试代码</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">type SolutionFuncType1 func(src PersonWithPointer) PersonWithPointer

var SolutionFuncTypeList1 = []SolutionFuncType1{
	DeepCopyPersonWithPointer,
	DeepCopyPersonWithPointerByJson,
}

type Case1 struct {
	caseName string
	input    PersonWithPointer
}

var cases1 = []Case1{
	{"normal", PersonWithPointer{Person: Person{Name: "zhangsan", Age: 20}, ParentInfo: ParentInfo{Father: "zhanger", Mother: "wanglili"}}},
}

func TestDeepCopyWithPointer(t *testing.T) {
	ast := assert.New(t)

	for _, f := range SolutionFuncTypeList1 {
		funcName := strings.Split(runtime.FuncForPC(reflect.ValueOf(f).Pointer()).Name(), ".")[1]
		for _, c := range cases1 {
			t.Run(fmt.Sprintf("%s %s", funcName, c.caseName), func(t *testing.T) {
				output := f(c.input)
				ast.Equal(c.input, output, "func:%s case:%s", funcName, c.caseName)
				ast.NotEqual(unsafe.Pointer(&amp;c.input), unsafe.Pointer(&amp;output))
			})
		}
	}
}</pre>



<p>既然利用已有的instance有两种方式， 那么到底是encode decode这种快，还是自定义的快呢？benchmark一下看看。</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">func BenchmarkDeepCopyWithPointer(b *testing.B) {
	for _, c := range cases1 {
		for n := 0; n &lt; b.N; n++ {
			DeepCopyPersonWithPointer(c.input)
		}
	}

}

func BenchmarkDeepCopyWithPointerByJson(b *testing.B) {
	for _, c := range cases1 {
		for n := 0; n &lt; b.N; n++ {
			DeepCopyPersonWithPointerByJson(c.input)
		}
	}

}</pre>



<p>benchmark结果</p>



<figure class="wp-block-image size-large"><img loading="lazy" decoding="async" width="1024" height="212" src="https://syncdown.github.io/wp-content/uploads/2024/06/image-3-1024x212.png" alt="" class="wp-image-194" srcset="https://syncdown.github.io/wp-content/uploads/2024/06/image-3-1024x212.png 1024w, https://syncdown.github.io/wp-content/uploads/2024/06/image-3-300x62.png 300w, https://syncdown.github.io/wp-content/uploads/2024/06/image-3-768x159.png 768w, https://syncdown.github.io/wp-content/uploads/2024/06/image-3-1536x319.png 1536w, https://syncdown.github.io/wp-content/uploads/2024/06/image-3.png 1572w" sizes="(max-width: 1024px) 100vw, 1024px" /></figure>



<p>执行的时候运行 go test -bench=被测试方法前缀。</p>



<p>从性能上看，从已有的instance进行深拷贝，用自定义的方法比json encode decode要快了三个数量级。</p>



<p>就是DeepCopyPersonWithPointer要比DeepCopyPersonWithPointerByJson快得多。</p>



<p>我使用的struct比较简单，如果是面对复杂一些的真实业务的场景，可能相差的性能会更大。</p>



<p>结论：</p>



<ol>
<li class="has-regular-font-size">原型复制有两种方式，一种是基于struct结构，一种是基于已有的instance把它作为种子进行拷贝</li>



<li class="has-regular-font-size">golang复制默认就是值传递</li>



<li class="has-regular-font-size">自定义的struct如果有指针类型，用自制的方法，细粒度到指针的子字段级别</li>



<li class="has-regular-font-size">相对于encode decode的深拷贝，自制的方法性能会更好</li>
</ol>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
