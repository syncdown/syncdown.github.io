<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>defer</title>
	<atom:link href="https://syncdown.github.io/tag/defer/feed/" rel="self" type="application/rss+xml" />
	<link>https://syncdown.github.io/</link>
	<description></description>
	<lastBuildDate>Tue, 16 Jul 2024 09:05:24 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.5.5</generator>

<image>
	<url>https://syncdown.github.io/wp-content/uploads/2024/04/syncdown-150x150.png</url>
	<title>defer</title>
	<link>https://syncdown.github.io/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>go中的defer</title>
		<link>https://syncdown.github.io/go%e4%b8%ad%e7%9a%84defer/</link>
		
		<dc:creator><![CDATA[Zhenyu Chen]]></dc:creator>
		<pubDate>Tue, 16 Jul 2024 07:25:58 +0000</pubDate>
				<category><![CDATA[技术]]></category>
		<category><![CDATA[defer]]></category>
		<category><![CDATA[golang]]></category>
		<guid isPermaLink="false">https://syncdown.github.io/?p=242</guid>

					<description><![CDATA[说起defer ， 用go进行开发的工程师肯定不会陌生。 粗浅的说，是用先进后出的方式，在方法返回的时刻进行执行statement的关键字。 官方文档：“A [&#8230;]]]></description>
										<content:encoded><![CDATA[
<p>说起defer ， 用go进行开发的工程师肯定不会陌生。 </p>



<p>粗浅的说，是用先进后出的方式，在方法返回的时刻进行执行statement的关键字。 </p>



<blockquote class="wp-block-quote is-layout-flow wp-block-quote-is-layout-flow">
<p>官方文档：“A “defer” statement invokes a function whose execution is deferred to the moment the surrounding function returns, either because the surrounding function executed a return statement, reached the end of its function body, or because the corresponding goroutine is panicking.”<br>即函数返回、函数结束或者对应的goroutine发生panic时defer执行。</p>



<p>关键词：surrounding function，returns，end of its function body, goroutine panicking</p>
</blockquote>



<p>确实，之前总是狭隘的认为就方法return的时刻，没有想到panic的情况， 是记不准确也不全面。 </p>



<ol>
<li>defer运行的时机</li>
</ol>



<ul>
<li>说法一：defer的运行时机是方法返回结束之后，返回之前。</li>



<li>说法二：既然是defer那么就有外围方法和当前方法的区别，是当前方法返回之后，外围方法执行之前。</li>



<li>不管是哪种说法，写代码验证一下就好。</li>
</ul>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package main

import "fmt"

func external() {
	fmt.Println("external is starting")
	internal()
	fmt.Println("external is ending")
}

func internal() {
	fmt.Println("internal is starting")
	defer func() {
		fmt.Println("internal defer is executing")
	}()
	fmt.Println("internal is ending")

}
func main() {
	external()
}
</pre>



<p>执行结果</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">external is starting
internal is starting
internal is ending
internal defer is executing
external is ending</pre>



<p>defer执行的时机，<strong>是在当法return或语句结束之后，而在方法真正退出之前</strong>。</p>



<p>2. 多个defer的执行顺序-后入先出。即LIFO</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">package main

import (
    "fmt"
)

func main() {
    defer fmt.Println("main defer1")
    test()
    defer fmt.Println("main defer2")
}

func test() () {
    defer func() {
        fmt.Println("test defer1")
    }()
    defer func() {
        fmt.Println("test defer2")
    }()
}
</pre>



<p>执行结果</p>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">test defer2
test defer1
main defer2
main defer1</pre>



<p>当多个defer的时候，就像栈一样，有压栈和出栈，其实是当前goroutine的defer链。执行的<strong>顺序是LIFO</strong>，最后压栈的会第一个执行。</p>



<p>3.除了return，当出现panic的时候defer也会被触发执行。</p>



<p>defer这个用处就非常大了，当然也得交代一下其他的背景。</p>



<ul>
<li><code>panic</code> 能够改变程序的控制流，调用 <code>panic</code> 后会立刻停止执行当前函数的剩余代码，并在当前 Goroutine 中递归执行调用<code>defer</code>；</li>



<li><code>recover</code> 可以中止 <code>panic</code> 造成的程序崩溃。它是一个只能在 <code>defer</code> 中发挥作用的函数，在其他作用域中调用不会发挥作用；</li>
</ul>



<pre class="EnlighterJSRAW" data-enlighter-language="generic" data-enlighter-theme="" data-enlighter-highlight="" data-enlighter-linenumbers="" data-enlighter-lineoffset="" data-enlighter-title="" data-enlighter-group="">func try(f func()) {
    defer func() {
        if err := recover(); err != nil {
            fmt.Println("caught panic:", err)
        }
    }()
    f()
}</pre>



<p>一般会封装一个<strong>try或者myRecover</strong>的方法，传入参数是自定义的方法。先defer后再执行自定义方法，recover一定要在defer中才能发挥作用。</p>



<p>总结：</p>



<ol>
<li>defer的执行时机是方法return之后，真正退出之前。</li>



<li>多个defer的顺序是LIFO，类似于栈。</li>



<li>封装myRcover方法，传入参数是自定义方法。当自定义方法出现panic，在defer中会用recover中止程序崩溃。（<strong>defer机制的执行顺序决定了是自定义方法panic之后程序会捕获，recover起到了中止程序崩溃的作用</strong>）</li>
</ol>



<p></p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
